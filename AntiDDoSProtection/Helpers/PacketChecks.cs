using LiteNetLib;
using System.Collections.Generic;
using System.Linq;

namespace AntiDDoSProtection.Helpers
{
    public static class PacketChecks
    {
        public static bool IsFragmentedPacket(NetPacket packet, int maxPacketSize)
        {
            if (packet.Size < 28)
                return false;

            return packet.Size > maxPacketSize;
        }

        public static bool IsTooSmallPacket(NetPacket packet, int minPacketSize)
        {
            return packet.Size < minPacketSize;
        }

        public static bool IsLDAPPacket(NetPacket packet)
        {
            var ldapSignature = new byte[] { 0x30, 0x25, 0x02, 0x01, 0x01, 0x63, 0x20, 0x04, 0x00, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x87, 0x0B, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x30, 0x00 };

            var packetData = packet.RawData;
            return packetData.Take(ldapSignature.Length).ToArray().SequenceEqual(ldapSignature);
        }

        public static bool IsKnownPatternPacket(NetPacket packet)
        {
            var knownPatterns = new List<byte[]>
            {
                new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x45, 0x6E, 0x67, 0x69, 0x6E, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00 },
                new byte[] { 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30 },
                new byte[] { 0x45, 0x67, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x73, 0x6C, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x29, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                new byte[] { 0x17, 0x00, 0x03, 0x2A, 0x00, 0x00, 0x00, 0x00 }
            };

            var packetData = packet.RawData;

            return knownPatterns.Any(pattern => packetData.Take(pattern.Length).ToArray().SequenceEqual(pattern));
        }

        public static bool IsNTPPacket(NetPacket packet)
        {
            var ntpSignature = new byte[] { 0x17, 0x00, 0x03, 0x2A, 0x00, 0x00, 0x00, 0x00 };
            var packetData = packet.RawData;

            return packetData.Take(ntpSignature.Length).ToArray().SequenceEqual(ntpSignature);
        }
    }
}